interface RecaptchaResponse {
    success: boolean;
    score: number;
}

const recaptchaMiddleware = async (ctx: any, next: () => Promise<void>) => {
    try {
        strapi.log.info("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç —É Strapi. –ü–æ–≤–Ω–∏–π Body:", JSON.stringify(ctx.request.body, null, 2));

        // –ü–æ—à—É–∫ `recaptcha` —É `ctx.request.body` –∞–±–æ `ctx.request.body.data`
        const recaptcha = ctx.request.body?.recaptcha || ctx.request.body?.data?.recaptcha;

        if (!recaptcha) {
            strapi.log.error("‚ùå reCAPTCHA –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –∑–∞–ø–∏—Ç—ñ!");
            ctx.throw(400, "reCAPTCHA –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
        }

        const secretKey = process.env.RECAPTCHA_SECRET_KEY;
        if (!secretKey) {
            strapi.log.error("‚ùå SECRET KEY –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É .env");
            ctx.throw(500, "reCAPTCHA —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env");
        }

        strapi.log.info("üîπ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ reCAPTCHA –Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é...");
        // const verificationURL = `https://www.google.com/recaptcha/api/siteverify?secret=${secretKey}&response=${recaptcha}`;
        // const response = await fetch(verificationURL, { method: "POST" });

        const response = await fetch("https://www.google.com/recaptcha/api/siteverify", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: new URLSearchParams({
                secret: secretKey,
                response: recaptcha,
            }),
        });

        if (!response.ok) {
            const errorText = await response.text();
            strapi.log.error("‚ùå Google reCAPTCHA API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î! –ö–æ–¥:", response.status);
            strapi.log.error("üîπ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:", errorText);
            ctx.throw(500, `–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ reCAPTCHA: ${errorText}`);
        }

        const data = (await response.json()) as RecaptchaResponse;
        strapi.log.info("üîπ –û—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Google:", data);

        if (!data.success) {
            strapi.log.error("‚ùå Google –≤—ñ–¥—Ö–∏–ª–∏–≤ reCAPTCHA:", data);
            ctx.throw(403, "reCAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ");
        }

        if (data.score < 0.5) {
            strapi.log.error("‚ö†Ô∏è reCAPTCHA score –∑–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∏–π:", data.score);
            ctx.throw(403, "–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ reCAPTCHA –∑–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∏–π.");
        }

        strapi.log.info("‚úÖ reCAPTCHA —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ!");
        await next();
    } catch (error) {
        strapi.log.error("‚ùå –ü–æ–º–∏–ª–∫–∞ reCAPTCHA middleware:", error);
        ctx.throw(500, "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Strapi.");
    }
};

export default recaptchaMiddleware;
